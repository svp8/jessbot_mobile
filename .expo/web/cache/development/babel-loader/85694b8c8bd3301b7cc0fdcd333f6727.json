{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Link;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _useLinkProps = _interopRequireDefault(require(\"./useLinkProps\"));\n\nfunction Link(_ref) {\n  var to = _ref.to,\n      action = _ref.action,\n      rest = (0, _objectWithoutProperties2.default)(_ref, [\"to\", \"action\"]);\n  var props = (0, _useLinkProps.default)({\n    to: to,\n    action: action\n  });\n\n  var onPress = function onPress(e) {\n    if ('onPress' in rest) {\n      var _rest$onPress;\n\n      (_rest$onPress = rest.onPress) === null || _rest$onPress === void 0 ? void 0 : _rest$onPress.call(rest, e);\n    }\n\n    props.onPress(e);\n  };\n\n  return React.createElement(_reactNative.Text, (0, _extends2.default)({}, props, rest, _reactNative.Platform.select({\n    web: {\n      onClick: onPress\n    },\n    default: {\n      onPress: onPress\n    }\n  })));\n}","map":{"version":3,"sources":["Link.tsx"],"names":["rest","props","useLinkProps","to","action","onPress","e","web","onClick","default"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AAmBe,SAAA,IAAA,OAA8C;AAAA,MAAhC,EAAgC,QAAhC,EAAgC;AAAA,MAAhC,MAAgC,QAAhC,MAAgC;AAAA,MAAfA,IAAe;AAC3D,MAAMC,KAAK,GAAGC,2BAAa;AAAEC,IAAAA,EAAF,EAAEA,EAAF;AAAMC,IAAAA,MAAAA,EAAAA;AAAN,GAAbF,CAAd;;AAEA,MAAMG,OAAO,GACXC,SADID,OACJC,CAAAA,CADc,EAEX;AACH,QAAI,aAAJ,IAAA,EAAuB;AAAA,UAAA,aAAA;;AACrB,OAAA,aAAA,GAAA,IAAI,CAAJ,OAAA,MAAA,IAAA,IAAA,aAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,aAAA,CAAA,IAAA,CAAA,IAAA,EAAA,CAAA,CAAA;AACD;;AAEDL,IAAAA,KAAK,CAALA,OAAAA,CAAAA,CAAAA;AAPF,GAAA;;AAUA,SAAO,KAAK,CAAL,aAAA,CAAA,iBAAA,6BAA0B,KAA1B,EAA0B,IAA1B,EAGF,sBAAA,MAAA,CAAgB;AACjBM,IAAAA,GAAG,EAAE;AAAEC,MAAAA,OAAO,EAAEH;AAAX,KADY;AAEjBI,IAAAA,OAAO,EAAE;AAAEJ,MAAAA,OAAAA,EAAAA;AAAF;AAFQ,GAAhB,CAHE,EAAP;AAQD","sourcesContent":["import * as React from 'react';\nimport { Text, TextProps, GestureResponderEvent, Platform } from 'react-native';\nimport type { NavigationAction } from '@react-navigation/core';\nimport useLinkProps from './useLinkProps';\n\ntype Props = {\n  to: string;\n  action?: NavigationAction;\n  target?: string;\n  onPress?: (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => void;\n} & (TextProps & { children: React.ReactNode });\n\n/**\n * Component to render link to another screen using a path.\n * Uses an anchor tag on the web.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n * @param props.children Child elements to render the content.\n */\nexport default function Link({ to, action, ...rest }: Props) {\n  const props = useLinkProps({ to, action });\n\n  const onPress = (\n    e: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    if ('onPress' in rest) {\n      rest.onPress?.(e);\n    }\n\n    props.onPress(e);\n  };\n\n  return React.createElement(Text, {\n    ...props,\n    ...rest,\n    ...Platform.select({\n      web: { onClick: onPress } as any,\n      default: { onPress },\n    }),\n  });\n}\n"]},"metadata":{},"sourceType":"script"}