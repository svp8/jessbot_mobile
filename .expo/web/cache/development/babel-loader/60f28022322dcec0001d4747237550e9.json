{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useOnGetState;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _NavigationBuilderContext = _interopRequireDefault(require(\"./NavigationBuilderContext\"));\n\nvar _NavigationRouteContext = _interopRequireDefault(require(\"./NavigationRouteContext\"));\n\nvar _isArrayEqual = _interopRequireDefault(require(\"./isArrayEqual\"));\n\nfunction useOnGetState(_ref) {\n  var getState = _ref.getState,\n      getStateListeners = _ref.getStateListeners;\n\n  var _React$useContext = React.useContext(_NavigationBuilderContext.default),\n      addKeyedListener = _React$useContext.addKeyedListener;\n\n  var route = React.useContext(_NavigationRouteContext.default);\n  var key = route ? route.key : 'root';\n  var getRehydratedState = React.useCallback(function () {\n    var state = getState();\n    var routes = state.routes.map(function (route) {\n      var _getStateListeners$ro;\n\n      var childState = (_getStateListeners$ro = getStateListeners[route.key]) === null || _getStateListeners$ro === void 0 ? void 0 : _getStateListeners$ro.call(getStateListeners);\n\n      if (route.state === childState) {\n        return route;\n      }\n\n      return (0, _extends2.default)({}, route, {\n        state: childState\n      });\n    });\n\n    if ((0, _isArrayEqual.default)(state.routes, routes)) {\n      return state;\n    }\n\n    return (0, _extends2.default)({}, state, {\n      routes: routes\n    });\n  }, [getState, getStateListeners]);\n  React.useEffect(function () {\n    return addKeyedListener === null || addKeyedListener === void 0 ? void 0 : addKeyedListener('getState', key, getRehydratedState);\n  }, [addKeyedListener, getRehydratedState, key]);\n}","map":{"version":3,"sources":["useOnGetState.tsx"],"names":["getStateListeners","addKeyedListener","React","route","key","getRehydratedState","state","getState","routes","childState","isArrayEqual"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;AAGA;;AACA;;AAOe,SAAA,aAAA,OAGH;AAAA,MAH0B,QAG1B,QAH0B,QAG1B;AAAA,MADVA,iBACU,QADVA,iBACU;;AAAA,0BACmBE,KAAK,CAALA,UAAAA,CAA7B,iCAA6BA,CADnB;AAAA,MACFD,gBADE,qBACFA,gBADE;;AAEV,MAAME,KAAK,GAAGD,KAAK,CAALA,UAAAA,CAAd,+BAAcA,CAAd;AACA,MAAME,GAAG,GAAGD,KAAK,GAAGA,KAAK,CAAR,GAAA,GAAjB,MAAA;AAEA,MAAME,kBAAkB,GAAG,KAAK,CAAL,WAAA,CAAkB,YAAM;AACjD,QAAMC,KAAK,GAAGC,QADmC,EACjD;AAGA,QAAMC,MAAM,GAAG,KAAK,CAAL,MAAA,CAAA,GAAA,CAAkBL,UAAAA,KAAD,EAAW;AAAA,UAAA,qBAAA;;AACzC,UAAMM,UAAU,GAAA,CAAA,qBAAA,GAAGT,iBAAiB,CAACG,KAAK,CAA1B,GAAoB,CAApB,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGH,qBAAAA,CAAAA,IAAAA,CAAnB,iBAAmBA,CAAnB;;AAEA,UAAIG,KAAK,CAALA,KAAAA,KAAJ,UAAA,EAAgC;AAC9B,eAAA,KAAA;AACD;;AAED,wCAAO,KAAP;AAAmBG,QAAAA,KAAK,EAAEG;AAA1B;AAPF,KAAe,CAAf;;AAUA,QAAIC,2BAAaJ,KAAK,CAAN,MAAZI,EAAJ,MAAIA,CAAJ,EAAwC;AACtC,aAAA,KAAA;AACD;;AAED,sCAAO,KAAP;AAAmBF,MAAAA,MAAAA,EAAAA;AAAnB;AAlByB,GAAA,EAmBxB,CAAA,QAAA,EAnBH,iBAmBG,CAnBwB,CAA3B;AAqBAN,EAAAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;AACpB,WAAOD,gBAAP,KAAA,IAAOA,IAAAA,gBAAP,KAAA,KAAA,CAAOA,GAAP,KAAA,CAAOA,GAAAA,gBAAgB,CAAA,UAAA,EAAA,GAAA,EAAvB,kBAAuB,CAAvB;AADFC,GAAAA,EAEG,CAAA,gBAAA,EAAA,kBAAA,EAFHA,GAEG,CAFHA;AAGD","sourcesContent":["import * as React from 'react';\nimport type { NavigationState } from '@react-navigation/routers';\nimport NavigationBuilderContext, {\n  GetStateListener,\n} from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport isArrayEqual from './isArrayEqual';\n\ntype Options = {\n  getState: () => NavigationState;\n  getStateListeners: Record<string, GetStateListener | undefined>;\n};\n\nexport default function useOnGetState({\n  getState,\n  getStateListeners,\n}: Options) {\n  const { addKeyedListener } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const key = route ? route.key : 'root';\n\n  const getRehydratedState = React.useCallback(() => {\n    const state = getState();\n\n    // Avoid returning new route objects if we don't need to\n    const routes = state.routes.map((route) => {\n      const childState = getStateListeners[route.key]?.();\n\n      if (route.state === childState) {\n        return route;\n      }\n\n      return { ...route, state: childState };\n    });\n\n    if (isArrayEqual(state.routes, routes)) {\n      return state;\n    }\n\n    return { ...state, routes };\n  }, [getState, getStateListeners]);\n\n  React.useEffect(() => {\n    return addKeyedListener?.('getState', key, getRehydratedState);\n  }, [addKeyedListener, getRehydratedState, key]);\n}\n"]},"metadata":{},"sourceType":"script"}